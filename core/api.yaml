openapi: 3.0.3
info:
  title: SmartSwap Backend API
  version: "1.0.0"
  description: |
    Production-ready REST API for minimal CEX/DEX backend, in-memory orderbook, swap simulation, and quoting.
    Designed for low-latency and extensibility. All amounts and prices are strings (decimals) for precise compatibility with DeFi and frontend logic.

servers:
  - url: http://127.0.0.1:8080/api

tags:
  - name: Health
    description: Service and liveness endpoints
  - name: OrderBook
    description: Orderbook management (add, list, delete)
  - name: Swap
    description: Swap simulation/calculation endpoints
  - name: Quote
    description: Quote calculation endpoints

paths:

  /health:
    get:
      tags: [Health]
      summary: Health check endpoint
      description: Returns status of the backend service.
      responses:
        '200':
          description: Server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok

  /orderbook/add:
    post:
      tags: [OrderBook]
      summary: Add new order to orderbook
      description: Create a new order in the in-memory orderbook.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOrderRequest'
      responses:
        '200':
          description: Order successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddOrderResponse'
              example:
                order_id: "686119e6-bd41-4425-9b58-0b291eed2225"
                status: ok
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Invalid parameter"
                code: "INVALID_PARAMETER"

  /orderbook/list:
    get:
      tags: [OrderBook]
      summary: Get list of all orders
      description: Returns a list of all current orders in the orderbook.
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
              example:
                orders:
                  - id: "686119e6-bd41-4425-9b58-0b291eed2225"
                    base: ETH
                    quote: USDT
                    amount: "1.0"
                    price: "3200.0"
                    side: BUY

  /orderbook/delete:
    post:
      tags: [OrderBook]
      summary: Delete order by id
      description: Deletes order by its unique id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteOrderRequest'
      responses:
        '200':
          description: Order deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Order not found"
                code: "ORDER_NOT_FOUND"

  /swap/mock:
    post:
      tags: [Swap]
      summary: Simulate a swap (mock calculation)
      description: Simulate a swap (no state change) and return output amount.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SwapMockRequest'
      responses:
        '200':
          description: Simulated swap result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SwapMockResponse'
              example:
                amount_out: "4500.00"
                price: "3000.0"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "amount_in/price must be > 0"
                code: "INVALID_PARAMETER"

  /swap/quote:
    get:
      tags: [Quote]
      summary: Get quote for swap
      description: Returns output amount for given input, price, and tokens.
      parameters:
        - in: query
          name: from_token
          schema:
            type: string
          required: true
          description: Input token symbol (e.g. ETH)
        - in: query
          name: to_token
          schema:
            type: string
          required: true
          description: Output token symbol (e.g. USDT)
        - in: query
          name: amount_in
          schema:
            type: string
          required: true
          description: Input amount (as decimal string)
        - in: query
          name: price
          schema:
            type: string
          required: true
          description: Execution price (as decimal string)
      responses:
        '200':
          description: Quote calculated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteResponse'
              example:
                amount_out: 3200.0
                price: "3200.0"
                from_token: ETH
                to_token: USDT
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Invalid parameter"
                code: "INVALID_PARAMETER"

components:
  schemas:
    AddOrderRequest:
      type: object
      required: [base, quote, amount, price, side]
      properties:
        base:
          type: string
          description: "Base token symbol (e.g. ETH)"
          example: ETH
        quote:
          type: string
          description: "Quote token symbol (e.g. USDT)"
          example: USDT
        amount:
          type: string
          description: "Order amount (decimal as string)"
          example: "1.0"
        price:
          type: string
          description: "Order price (decimal as string)"
          example: "3200.0"
        side:
          type: string
          description: "Order side (BUY or SELL)"
          enum: [BUY, SELL]
          example: BUY
    AddOrderResponse:
      type: object
      description: "Response when order is added"
      properties:
        order_id:
          type: string
          format: uuid
          description: "Unique order UUID"
          example: "686119e6-bd41-4425-9b58-0b291eed2225"
        status:
          type: string
          description: "Operation result"
          example: ok
    Order:
      type: object
      description: "Order in the in-memory orderbook"
      properties:
        id:
          type: string
          format: uuid
          description: "Order UUID"
        base:
          type: string
          description: "Base token symbol"
        quote:
          type: string
          description: "Quote token symbol"
        amount:
          type: string
          description: "Order amount (decimal as string)"
        price:
          type: string
          description: "Order price (decimal as string)"
        side:
          type: string
          enum: [BUY, SELL]
          description: "Order side"
    OrderListResponse:
      type: object
      description: "List of all orders"
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
    DeleteOrderRequest:
      type: object
      required: [id]
      properties:
        id:
          type: string
          format: uuid
          description: "Order UUID to delete"
          example: "686119e6-bd41-4425-9b58-0b291eed2225"
    SwapMockRequest:
      type: object
      required: [amount_in, price]
      properties:
        amount_in:
          type: string
          description: "Amount to swap (decimal as string)"
          example: "1.5"
        price:
          type: string
          description: "Execution price (decimal as string)"
          example: "3000.0"
    SwapMockResponse:
      type: object
      description: "Simulated swap result"
      properties:
        amount_out:
          type: string
          description: "Calculated output amount (decimal as string)"
          example: "4500.00"
        price:
          type: string
          description: "Execution price (decimal as string)"
          example: "3000.0"
    QuoteResponse:
      type: object
      description: "Quote calculation response"
      properties:
        amount_out:
          type: number
          description: "Calculated output amount"
          example: 3200.0
        price:
          type: string
          description: "Execution price (decimal as string)"
          example: "3200.0"
        from_token:
          type: string
          description: "Input token symbol"
          example: ETH
        to_token:
          type: string
          description: "Output token symbol"
          example: USDT
    ErrorResponse:
      type: object
      description: "Error response for invalid input or failures"
      properties:
        error:
          type: string
          description: "Error message"
          example: "Invalid parameter"
        code:
          type: string
          description: "Machine-readable error code"
          example: "INVALID_PARAMETER"