/* tslint:disable */
/* eslint-disable */
/**
 * SmartSwap Backend API
 * Production-ready REST API for minimal CEX/DEX backend, in-memory orderbook, swap simulation, and quoting. Designed for low-latency and extensibility. All amounts and prices are strings (decimals) for precise compatibility with DeFi and frontend logic. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  QuoteResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    QuoteResponseFromJSON,
    QuoteResponseToJSON,
} from '../models/index';

export interface SwapQuoteGetRequest {
    fromToken: string;
    toToken: string;
    amountIn: string;
    price: string;
}

/**
 * 
 */
export class QuoteApi extends runtime.BaseAPI {

    /**
     * Returns output amount for given input, price, and tokens.
     * Get quote for swap
     */
    async swapQuoteGetRaw(requestParameters: SwapQuoteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteResponse>> {
        if (requestParameters['fromToken'] == null) {
            throw new runtime.RequiredError(
                'fromToken',
                'Required parameter "fromToken" was null or undefined when calling swapQuoteGet().'
            );
        }

        if (requestParameters['toToken'] == null) {
            throw new runtime.RequiredError(
                'toToken',
                'Required parameter "toToken" was null or undefined when calling swapQuoteGet().'
            );
        }

        if (requestParameters['amountIn'] == null) {
            throw new runtime.RequiredError(
                'amountIn',
                'Required parameter "amountIn" was null or undefined when calling swapQuoteGet().'
            );
        }

        if (requestParameters['price'] == null) {
            throw new runtime.RequiredError(
                'price',
                'Required parameter "price" was null or undefined when calling swapQuoteGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fromToken'] != null) {
            queryParameters['from_token'] = requestParameters['fromToken'];
        }

        if (requestParameters['toToken'] != null) {
            queryParameters['to_token'] = requestParameters['toToken'];
        }

        if (requestParameters['amountIn'] != null) {
            queryParameters['amount_in'] = requestParameters['amountIn'];
        }

        if (requestParameters['price'] != null) {
            queryParameters['price'] = requestParameters['price'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/swap/quote`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteResponseFromJSON(jsonValue));
    }

    /**
     * Returns output amount for given input, price, and tokens.
     * Get quote for swap
     */
    async swapQuoteGet(requestParameters: SwapQuoteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteResponse> {
        const response = await this.swapQuoteGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
