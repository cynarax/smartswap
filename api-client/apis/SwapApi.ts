/* tslint:disable */
/* eslint-disable */
/**
 * SmartSwap Backend API
 * Production-ready REST API for minimal CEX/DEX backend, in-memory orderbook, swap simulation, and quoting. Designed for low-latency and extensibility. All amounts and prices are strings (decimals) for precise compatibility with DeFi and frontend logic. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  SwapMockRequest,
  SwapMockResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SwapMockRequestFromJSON,
    SwapMockRequestToJSON,
    SwapMockResponseFromJSON,
    SwapMockResponseToJSON,
} from '../models/index';

export interface SwapMockPostRequest {
    swapMockRequest: SwapMockRequest;
}

/**
 * 
 */
export class SwapApi extends runtime.BaseAPI {

    /**
     * Simulate a swap (no state change) and return output amount.
     * Simulate a swap (mock calculation)
     */
    async swapMockPostRaw(requestParameters: SwapMockPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SwapMockResponse>> {
        if (requestParameters['swapMockRequest'] == null) {
            throw new runtime.RequiredError(
                'swapMockRequest',
                'Required parameter "swapMockRequest" was null or undefined when calling swapMockPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/swap/mock`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SwapMockRequestToJSON(requestParameters['swapMockRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SwapMockResponseFromJSON(jsonValue));
    }

    /**
     * Simulate a swap (no state change) and return output amount.
     * Simulate a swap (mock calculation)
     */
    async swapMockPost(requestParameters: SwapMockPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SwapMockResponse> {
        const response = await this.swapMockPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
