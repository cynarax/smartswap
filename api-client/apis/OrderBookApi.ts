/* tslint:disable */
/* eslint-disable */
/**
 * SmartSwap Backend API
 * Production-ready REST API for minimal CEX/DEX backend, in-memory orderbook, swap simulation, and quoting. Designed for low-latency and extensibility. All amounts and prices are strings (decimals) for precise compatibility with DeFi and frontend logic. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddOrderRequest,
  AddOrderResponse,
  DeleteOrderRequest,
  ErrorResponse,
  OrderListResponse,
  OrderbookDeletePost200Response,
} from '../models/index';
import {
    AddOrderRequestFromJSON,
    AddOrderRequestToJSON,
    AddOrderResponseFromJSON,
    AddOrderResponseToJSON,
    DeleteOrderRequestFromJSON,
    DeleteOrderRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    OrderListResponseFromJSON,
    OrderListResponseToJSON,
    OrderbookDeletePost200ResponseFromJSON,
    OrderbookDeletePost200ResponseToJSON,
} from '../models/index';

export interface OrderbookAddPostRequest {
    addOrderRequest: AddOrderRequest;
}

export interface OrderbookDeletePostRequest {
    deleteOrderRequest: DeleteOrderRequest;
}

/**
 * 
 */
export class OrderBookApi extends runtime.BaseAPI {

    /**
     * Create a new order in the in-memory orderbook.
     * Add new order to orderbook
     */
    async orderbookAddPostRaw(requestParameters: OrderbookAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddOrderResponse>> {
        if (requestParameters['addOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'addOrderRequest',
                'Required parameter "addOrderRequest" was null or undefined when calling orderbookAddPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/orderbook/add`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddOrderRequestToJSON(requestParameters['addOrderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddOrderResponseFromJSON(jsonValue));
    }

    /**
     * Create a new order in the in-memory orderbook.
     * Add new order to orderbook
     */
    async orderbookAddPost(requestParameters: OrderbookAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddOrderResponse> {
        const response = await this.orderbookAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes order by its unique id.
     * Delete order by id
     */
    async orderbookDeletePostRaw(requestParameters: OrderbookDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderbookDeletePost200Response>> {
        if (requestParameters['deleteOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteOrderRequest',
                'Required parameter "deleteOrderRequest" was null or undefined when calling orderbookDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/orderbook/delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteOrderRequestToJSON(requestParameters['deleteOrderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderbookDeletePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes order by its unique id.
     * Delete order by id
     */
    async orderbookDeletePost(requestParameters: OrderbookDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderbookDeletePost200Response> {
        const response = await this.orderbookDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all current orders in the orderbook.
     * Get list of all orders
     */
    async orderbookListGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/orderbook/list`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderListResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all current orders in the orderbook.
     * Get list of all orders
     */
    async orderbookListGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderListResponse> {
        const response = await this.orderbookListGetRaw(initOverrides);
        return await response.value();
    }

}
