/* tslint:disable */
/* eslint-disable */
/**
 * SmartSwap Backend API
 * Production-ready REST API for minimal CEX/DEX backend, in-memory orderbook, swap simulation, and quoting. Designed for low-latency and extensibility. All amounts and prices are strings (decimals) for precise compatibility with DeFi and frontend logic. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Simulated swap result
 * @export
 * @interface SwapMockResponse
 */
export interface SwapMockResponse {
    /**
     * Calculated output amount (decimal as string)
     * @type {string}
     * @memberof SwapMockResponse
     */
    amountOut?: string;
    /**
     * Execution price (decimal as string)
     * @type {string}
     * @memberof SwapMockResponse
     */
    price?: string;
}

/**
 * Check if a given object implements the SwapMockResponse interface.
 */
export function instanceOfSwapMockResponse(value: object): value is SwapMockResponse {
    return true;
}

export function SwapMockResponseFromJSON(json: any): SwapMockResponse {
    return SwapMockResponseFromJSONTyped(json, false);
}

export function SwapMockResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): SwapMockResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'amountOut': json['amount_out'] == null ? undefined : json['amount_out'],
        'price': json['price'] == null ? undefined : json['price'],
    };
}

export function SwapMockResponseToJSON(json: any): SwapMockResponse {
    return SwapMockResponseToJSONTyped(json, false);
}

export function SwapMockResponseToJSONTyped(value?: SwapMockResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'amount_out': value['amountOut'],
        'price': value['price'],
    };
}

