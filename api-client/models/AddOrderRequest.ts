/* tslint:disable */
/* eslint-disable */
/**
 * SmartSwap Backend API
 * Production-ready REST API for minimal CEX/DEX backend, in-memory orderbook, swap simulation, and quoting. Designed for low-latency and extensibility. All amounts and prices are strings (decimals) for precise compatibility with DeFi and frontend logic. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AddOrderRequest
 */
export interface AddOrderRequest {
    /**
     * Base token symbol (e.g. ETH)
     * @type {string}
     * @memberof AddOrderRequest
     */
    base: string;
    /**
     * Quote token symbol (e.g. USDT)
     * @type {string}
     * @memberof AddOrderRequest
     */
    quote: string;
    /**
     * Order amount (decimal as string)
     * @type {string}
     * @memberof AddOrderRequest
     */
    amount: string;
    /**
     * Order price (decimal as string)
     * @type {string}
     * @memberof AddOrderRequest
     */
    price: string;
    /**
     * Order side (BUY or SELL)
     * @type {string}
     * @memberof AddOrderRequest
     */
    side: AddOrderRequestSideEnum;
}


/**
 * @export
 */
export const AddOrderRequestSideEnum = {
    Buy: 'BUY',
    Sell: 'SELL'
} as const;
export type AddOrderRequestSideEnum = typeof AddOrderRequestSideEnum[keyof typeof AddOrderRequestSideEnum];


/**
 * Check if a given object implements the AddOrderRequest interface.
 */
export function instanceOfAddOrderRequest(value: object): value is AddOrderRequest {
    if (!('base' in value) || value['base'] === undefined) return false;
    if (!('quote' in value) || value['quote'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('price' in value) || value['price'] === undefined) return false;
    if (!('side' in value) || value['side'] === undefined) return false;
    return true;
}

export function AddOrderRequestFromJSON(json: any): AddOrderRequest {
    return AddOrderRequestFromJSONTyped(json, false);
}

export function AddOrderRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddOrderRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'base': json['base'],
        'quote': json['quote'],
        'amount': json['amount'],
        'price': json['price'],
        'side': json['side'],
    };
}

export function AddOrderRequestToJSON(json: any): AddOrderRequest {
    return AddOrderRequestToJSONTyped(json, false);
}

export function AddOrderRequestToJSONTyped(value?: AddOrderRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'base': value['base'],
        'quote': value['quote'],
        'amount': value['amount'],
        'price': value['price'],
        'side': value['side'],
    };
}

