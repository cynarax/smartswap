/* tslint:disable */
/* eslint-disable */
/**
 * SmartSwap Backend API
 * Production-ready REST API for minimal CEX/DEX backend, in-memory orderbook, swap simulation, and quoting. Designed for low-latency and extensibility. All amounts and prices are strings (decimals) for precise compatibility with DeFi and frontend logic. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Order in the in-memory orderbook
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * Order UUID
     * @type {string}
     * @memberof Order
     */
    id?: string;
    /**
     * Base token symbol
     * @type {string}
     * @memberof Order
     */
    base?: string;
    /**
     * Quote token symbol
     * @type {string}
     * @memberof Order
     */
    quote?: string;
    /**
     * Order amount (decimal as string)
     * @type {string}
     * @memberof Order
     */
    amount?: string;
    /**
     * Order price (decimal as string)
     * @type {string}
     * @memberof Order
     */
    price?: string;
    /**
     * Order side
     * @type {string}
     * @memberof Order
     */
    side?: OrderSideEnum;
}


/**
 * @export
 */
export const OrderSideEnum = {
    Buy: 'BUY',
    Sell: 'SELL'
} as const;
export type OrderSideEnum = typeof OrderSideEnum[keyof typeof OrderSideEnum];


/**
 * Check if a given object implements the Order interface.
 */
export function instanceOfOrder(value: object): value is Order {
    return true;
}

export function OrderFromJSON(json: any): Order {
    return OrderFromJSONTyped(json, false);
}

export function OrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Order {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'base': json['base'] == null ? undefined : json['base'],
        'quote': json['quote'] == null ? undefined : json['quote'],
        'amount': json['amount'] == null ? undefined : json['amount'],
        'price': json['price'] == null ? undefined : json['price'],
        'side': json['side'] == null ? undefined : json['side'],
    };
}

export function OrderToJSON(json: any): Order {
    return OrderToJSONTyped(json, false);
}

export function OrderToJSONTyped(value?: Order | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'base': value['base'],
        'quote': value['quote'],
        'amount': value['amount'],
        'price': value['price'],
        'side': value['side'],
    };
}

