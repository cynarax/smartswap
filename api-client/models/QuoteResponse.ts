/* tslint:disable */
/* eslint-disable */
/**
 * SmartSwap Backend API
 * Production-ready REST API for minimal CEX/DEX backend, in-memory orderbook, swap simulation, and quoting. Designed for low-latency and extensibility. All amounts and prices are strings (decimals) for precise compatibility with DeFi and frontend logic. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Quote calculation response
 * @export
 * @interface QuoteResponse
 */
export interface QuoteResponse {
    /**
     * Calculated output amount
     * @type {number}
     * @memberof QuoteResponse
     */
    amountOut?: number;
    /**
     * Execution price (decimal as string)
     * @type {string}
     * @memberof QuoteResponse
     */
    price?: string;
    /**
     * Input token symbol
     * @type {string}
     * @memberof QuoteResponse
     */
    fromToken?: string;
    /**
     * Output token symbol
     * @type {string}
     * @memberof QuoteResponse
     */
    toToken?: string;
}

/**
 * Check if a given object implements the QuoteResponse interface.
 */
export function instanceOfQuoteResponse(value: object): value is QuoteResponse {
    return true;
}

export function QuoteResponseFromJSON(json: any): QuoteResponse {
    return QuoteResponseFromJSONTyped(json, false);
}

export function QuoteResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuoteResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'amountOut': json['amount_out'] == null ? undefined : json['amount_out'],
        'price': json['price'] == null ? undefined : json['price'],
        'fromToken': json['from_token'] == null ? undefined : json['from_token'],
        'toToken': json['to_token'] == null ? undefined : json['to_token'],
    };
}

export function QuoteResponseToJSON(json: any): QuoteResponse {
    return QuoteResponseToJSONTyped(json, false);
}

export function QuoteResponseToJSONTyped(value?: QuoteResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'amount_out': value['amountOut'],
        'price': value['price'],
        'from_token': value['fromToken'],
        'to_token': value['toToken'],
    };
}

