/* tslint:disable */
/* eslint-disable */
/**
 * SmartSwap Backend API
 * Production-ready REST API for minimal CEX/DEX backend, in-memory orderbook, swap simulation, and quoting. Designed for low-latency and extensibility. All amounts and prices are strings (decimals) for precise compatibility with DeFi and frontend logic. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SwapMockRequest
 */
export interface SwapMockRequest {
    /**
     * Amount to swap (decimal as string)
     * @type {string}
     * @memberof SwapMockRequest
     */
    amountIn: string;
    /**
     * Execution price (decimal as string)
     * @type {string}
     * @memberof SwapMockRequest
     */
    price: string;
}

/**
 * Check if a given object implements the SwapMockRequest interface.
 */
export function instanceOfSwapMockRequest(value: object): value is SwapMockRequest {
    if (!('amountIn' in value) || value['amountIn'] === undefined) return false;
    if (!('price' in value) || value['price'] === undefined) return false;
    return true;
}

export function SwapMockRequestFromJSON(json: any): SwapMockRequest {
    return SwapMockRequestFromJSONTyped(json, false);
}

export function SwapMockRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SwapMockRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'amountIn': json['amount_in'],
        'price': json['price'],
    };
}

export function SwapMockRequestToJSON(json: any): SwapMockRequest {
    return SwapMockRequestToJSONTyped(json, false);
}

export function SwapMockRequestToJSONTyped(value?: SwapMockRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'amount_in': value['amountIn'],
        'price': value['price'],
    };
}

